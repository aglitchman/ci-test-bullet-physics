diff --git a/build_tools/sdk.py b/build_tools/sdk.py
index 75d8864a2f..7b95642388 100644
--- a/build_tools/sdk.py
+++ b/build_tools/sdk.py
@@ -71,8 +71,8 @@ ANDROID_64_NDK_API_VERSION='21' # Android 5.0
 # Win32
 
 # The version we have prepackaged
-VERSION_WINDOWS_SDK_10="10.0.20348.0"
-VERSION_WINDOWS_MSVC_2022="14.37.32822"
+VERSION_WINDOWS_SDK_10="10.0.26100.0"
+VERSION_WINDOWS_MSVC_2022="14.44.35207"
 PACKAGES_WIN32_TOOLCHAIN=f"Microsoft-Visual-Studio-2022-{VERSION_WINDOWS_MSVC_2022}"
 PACKAGES_WIN32_SDK_10=f"WindowsKits-{VERSION_WINDOWS_SDK_10}"
 
diff --git a/engine/gamesys/proto/gamesys/physics_ddf.proto b/engine/gamesys/proto/gamesys/physics_ddf.proto
index 41f047f835..58dd35ff2f 100644
--- a/engine/gamesys/proto/gamesys/physics_ddf.proto
+++ b/engine/gamesys/proto/gamesys/physics_ddf.proto
@@ -136,6 +136,44 @@ message ApplyForce
     required dmMath.Point3  position    = 2;
 }
 
+/*# applies a torque on a collision object
+ * Post this message to a collision-object-component to apply the specified torque on the collision object.
+ * The collision object must be dynamic.
+ *
+ * @message
+ * @name apply_torque
+ * @param torque [type:vector3] the torque to be applied on the collision object, measured in Newton
+ * @examples
+ *
+ * Assuming the instance of the script has a collision-object-component with id "co":
+ *
+ * ```lua
+ * -- apply a torque of 1 Newton-meter around world-z axis
+ * msg.post("#co", "apply_torque", {torque = vmath.vector3(0, 0, 1)})
+ * ```
+ */
+message ApplyTorque
+{
+    required dmMath.Vector3 torque = 1;
+}
+
+/*# clears the forces on a collision object
+ * Post this message to a collision-object-component to clear the forces on the collision object.
+ * The collision object must be dynamic.
+ *
+ * @message
+ * @name clear_forces
+ * @examples
+ *
+ * Assuming the instance of the script has a collision-object-component with id "co":
+ *
+ * ```lua
+ * msg.post("#co", "clear_forces")
+ * ```
+ */
+message ClearForces
+{}
+
 /*# reports a collision between two collision objects
  *
  * This message is broadcasted to every component of an instance that has a collision object,
diff --git a/engine/gamesys/src/gamesys/components/bullet3d/comp_collision_object_bullet3d.cpp b/engine/gamesys/src/gamesys/components/bullet3d/comp_collision_object_bullet3d.cpp
index 6b88707a93..7b7ce42727 100644
--- a/engine/gamesys/src/gamesys/components/bullet3d/comp_collision_object_bullet3d.cpp
+++ b/engine/gamesys/src/gamesys/components/bullet3d/comp_collision_object_bullet3d.cpp
@@ -77,6 +77,8 @@ namespace dmGameSystem
     {
         DM_STATIC_ASSERT(sizeof(ShapeInfo::m_BoxDimensions) <= sizeof(dmVMath::Vector3), Invalid_Struct_Size);
 
+        dmLogInfo("PATCH: Bullet Physics 3D New World");
+
         PhysicsContextBullet3D* physics_context = (PhysicsContextBullet3D*) params.m_Context;
         if (params.m_MaxComponentInstances == 0 || physics_context->m_Context == 0x0)
         {
@@ -521,6 +523,15 @@ namespace dmGameSystem
             dmPhysicsDDF::ApplyForce* af = (dmPhysicsDDF::ApplyForce*) params.m_Message->m_Data;
             dmPhysics::ApplyForce3D(physics_context->m_Context, component->m_Object3D, af->m_Force, af->m_Position);
         }
+        else if (params.m_Message->m_Id == dmPhysicsDDF::ApplyTorque::m_DDFDescriptor->m_NameHash)
+        {
+            dmPhysicsDDF::ApplyTorque* at = (dmPhysicsDDF::ApplyTorque*) params.m_Message->m_Data;
+            dmPhysics::ApplyTorque3D(physics_context->m_Context, component->m_Object3D, at->m_Torque);
+        }
+        else if (params.m_Message->m_Id == dmPhysicsDDF::ClearForces::m_DDFDescriptor->m_NameHash)
+        {
+            dmPhysics::ClearForces3D(physics_context->m_Context, component->m_Object3D);
+        }
         else if (params.m_Message->m_Id == dmPhysicsDDF::RequestVelocity::m_DDFDescriptor->m_NameHash)
         {
             dmPhysicsDDF::VelocityResponse response;
@@ -598,6 +609,41 @@ namespace dmGameSystem
             out_value.m_Variant = dmGameObject::PropertyVar(dmPhysics::GetAngularDamping3D(component->m_Object3D));
             return dmGameObject::PROPERTY_RESULT_OK;
         }
+        else if (params.m_PropertyId == PROP_TOTAL_FORCE)
+        {
+            out_value.m_Variant = dmGameObject::PropertyVar(dmPhysics::GetTotalForce3D(physics_context->m_Context, component->m_Object3D));
+            return dmGameObject::PROPERTY_RESULT_OK;
+        }
+        else if (params.m_PropertyId == PROP_TOTAL_TORQUE)
+        {
+            out_value.m_Variant = dmGameObject::PropertyVar(dmPhysics::GetTotalTorque3D(physics_context->m_Context, component->m_Object3D));
+            return dmGameObject::PROPERTY_RESULT_OK;
+        }
+        else if (params.m_PropertyId == PROP_LINEAR_FACTOR)
+        {
+            out_value.m_Variant = dmGameObject::PropertyVar(dmPhysics::GetLinearFactor3D(component->m_Object3D));
+            return dmGameObject::PROPERTY_RESULT_OK;
+        }
+        else if (params.m_PropertyId == PROP_ANGULAR_FACTOR)
+        {
+            out_value.m_Variant = dmGameObject::PropertyVar(dmPhysics::GetAngularFactor3D(component->m_Object3D));
+            return dmGameObject::PROPERTY_RESULT_OK;
+        }
+        else if (params.m_PropertyId == PROP_CONTACT_PROCESSING_THRESHOLD)
+        {
+            out_value.m_Variant = dmGameObject::PropertyVar(dmPhysics::GetContactProcessingThreshold3D(component->m_Object3D));
+            return dmGameObject::PROPERTY_RESULT_OK;
+        }
+        else if (params.m_PropertyId == PROP_LINEAR_SLEEPING_THRESHOLD)
+        {
+            out_value.m_Variant = dmGameObject::PropertyVar(dmPhysics::GetLinearSleepingThreshold3D(component->m_Object3D));
+            return dmGameObject::PROPERTY_RESULT_OK;
+        }
+        else if (params.m_PropertyId == PROP_ANGULAR_SLEEPING_THRESHOLD)
+        {
+            out_value.m_Variant = dmGameObject::PropertyVar(dmPhysics::GetAngularSleepingThreshold3D(component->m_Object3D));
+            return dmGameObject::PROPERTY_RESULT_OK;
+        }
         return dmGameObject::PROPERTY_RESULT_NOT_FOUND;
     }
 
@@ -650,6 +696,51 @@ namespace dmGameSystem
         {
             return dmGameObject::PROPERTY_RESULT_READ_ONLY;
         }
+        else if (params.m_PropertyId == PROP_CONTACT_PROCESSING_THRESHOLD)
+        {
+            if (params.m_Value.m_Type != dmGameObject::PROPERTY_TYPE_NUMBER)
+            {
+                return dmGameObject::PROPERTY_RESULT_TYPE_MISMATCH;
+            }
+            dmPhysics::SetContactProcessingThreshold3D(component->m_Object3D, params.m_Value.m_Number);
+            return dmGameObject::PROPERTY_RESULT_OK;
+        }
+        else if (params.m_PropertyId == PROP_LINEAR_FACTOR)
+        {
+            if (params.m_Value.m_Type != dmGameObject::PROPERTY_TYPE_VECTOR3)
+            {
+                return dmGameObject::PROPERTY_RESULT_TYPE_MISMATCH;
+            }
+            dmPhysics::SetLinearFactor3D(component->m_Object3D, dmVMath::Vector3(params.m_Value.m_V4[0], params.m_Value.m_V4[1], params.m_Value.m_V4[2]));
+            return dmGameObject::PROPERTY_RESULT_OK;
+        }
+        else if (params.m_PropertyId == PROP_ANGULAR_FACTOR)
+        {
+            if (params.m_Value.m_Type != dmGameObject::PROPERTY_TYPE_VECTOR3)
+            {
+                return dmGameObject::PROPERTY_RESULT_TYPE_MISMATCH;
+            }
+            dmPhysics::SetAngularFactor3D(component->m_Object3D, dmVMath::Vector3(params.m_Value.m_V4[0], params.m_Value.m_V4[1], params.m_Value.m_V4[2]));
+            return dmGameObject::PROPERTY_RESULT_OK;
+        }
+        else if (params.m_PropertyId == PROP_LINEAR_SLEEPING_THRESHOLD)
+        {
+            if (params.m_Value.m_Type != dmGameObject::PROPERTY_TYPE_NUMBER)
+            {
+                return dmGameObject::PROPERTY_RESULT_TYPE_MISMATCH;
+            }
+            dmPhysics::SetLinearSleepingThreshold3D(component->m_Object3D, params.m_Value.m_Number);
+            return dmGameObject::PROPERTY_RESULT_OK;
+        }
+        else if (params.m_PropertyId == PROP_ANGULAR_SLEEPING_THRESHOLD)
+        {
+            if (params.m_Value.m_Type != dmGameObject::PROPERTY_TYPE_NUMBER)
+            {
+                return dmGameObject::PROPERTY_RESULT_TYPE_MISMATCH;
+            }
+            dmPhysics::SetAngularSleepingThreshold3D(component->m_Object3D, params.m_Value.m_Number);
+            return dmGameObject::PROPERTY_RESULT_OK;
+        }
         return dmGameObject::PROPERTY_RESULT_NOT_FOUND;
     }
 
@@ -859,6 +950,18 @@ namespace dmGameSystem
         return PhysicsEngineType::PHYSICS_ENGINE_BULLET3D;
     }
 
+    static void* GetNativeCollisionObjectBullet3D(CollisionComponent* _component)
+    {
+        CollisionComponentBullet3D* component = (CollisionComponentBullet3D*)_component;
+        return dmPhysics::GetNativeCollisionObject3D(component->m_Object3D);
+    }
+
+    static void* GetNativeCollisionWorldBullet3D(CollisionWorld* _world)
+    {
+        CollisionWorldBullet3D* world = (CollisionWorldBullet3D*)_world;
+        return dmPhysics::GetNativeCollisionWorld3D(world->m_World3D);
+    }
+
     static void InstallBullet3DPhysicsAdapter()
     {
         if (g_PhysicsAdapter)
@@ -881,6 +984,9 @@ namespace dmGameSystem
         g_PhysicsAdapter->m_SetShape               = SetShapeBullet3D;
         g_PhysicsAdapter->m_GetPhysicsEngineType   = GetPhysicsEngineTypeBullet3D;
 
+        g_PhysicsAdapter->m_GetNativeCollisionObject = GetNativeCollisionObjectBullet3D;
+        g_PhysicsAdapter->m_GetNativeCollisionWorld  = GetNativeCollisionWorldBullet3D;
+
         // Unimplemented functions:
         //g_PhysicsAdapter->m_SetCollisionFlipH      = SetCollisionFlipHBullet3D;
         //g_PhysicsAdapter->m_SetCollisionFlipV      = SetCollisionFlipVBullet3D;
diff --git a/engine/gamesys/src/gamesys/components/comp_collision_object.cpp b/engine/gamesys/src/gamesys/components/comp_collision_object.cpp
index a5d96d980a..19a3e0f37e 100644
--- a/engine/gamesys/src/gamesys/components/comp_collision_object.cpp
+++ b/engine/gamesys/src/gamesys/components/comp_collision_object.cpp
@@ -21,6 +21,7 @@
 #include "gamesys.h"
 
 #include <dlib/profile.h>
+#include <dlib/log.h>
 #include <gameobject/gameobject_ddf.h>
 #include <dmsdk/gameobject/script.h>
 
@@ -978,4 +979,22 @@ namespace dmGameSystem
         }
         return world->m_AdapterFunctions->m_GetPhysicsEngineType(world);
     }
+
+    void* GetNativeCollisionObject(CollisionWorld* world, CollisionComponent* component)
+    {
+        if (!world->m_AdapterFunctions->m_GetNativeCollisionObject)
+        {
+            return 0;
+        }
+        return world->m_AdapterFunctions->m_GetNativeCollisionObject(component);
+    }
+
+    void* GetNativeCollisionWorld(CollisionWorld* world)
+    {
+        if (!world->m_AdapterFunctions->m_GetNativeCollisionWorld)
+        {
+            return 0;
+        }
+        return world->m_AdapterFunctions->m_GetNativeCollisionWorld(world);
+    }
 }
diff --git a/engine/gamesys/src/gamesys/components/comp_collision_object.h b/engine/gamesys/src/gamesys/components/comp_collision_object.h
index 450dbda1b5..6d181d7a56 100644
--- a/engine/gamesys/src/gamesys/components/comp_collision_object.h
+++ b/engine/gamesys/src/gamesys/components/comp_collision_object.h
@@ -94,6 +94,10 @@ namespace dmGameSystem
     dmPhysics::JointResult SetJointParams(CollisionWorld* world, CollisionComponent* component, dmhash_t id, const dmPhysics::ConnectJointParams& joint_params);
     dmPhysics::JointResult GetJointReactionForce(CollisionWorld* world, CollisionComponent* component, dmhash_t id, dmVMath::Vector3& force);
     dmPhysics::JointResult GetJointReactionTorque(CollisionWorld* world, CollisionComponent* component, dmhash_t id, float& torque);
+
+    // Native API
+    void* GetNativeCollisionObject(CollisionWorld* world, CollisionComponent* component);
+    void* GetNativeCollisionWorld(CollisionWorld* world);
 }
 
 #endif // DM_GAMESYS_COMP_COLLISION_OBJECT_H
diff --git a/engine/gamesys/src/gamesys/components/comp_collision_object_private.h b/engine/gamesys/src/gamesys/components/comp_collision_object_private.h
index 2ec67baf3f..8d8ea79323 100644
--- a/engine/gamesys/src/gamesys/components/comp_collision_object_private.h
+++ b/engine/gamesys/src/gamesys/components/comp_collision_object_private.h
@@ -27,6 +27,21 @@ namespace dmGameSystem
     static const dmhash_t PROP_MASS             = dmHashString64("mass");
     static const dmhash_t PROP_BULLET           = dmHashString64("bullet");
 
+    // 3D-only properties
+    static const dmhash_t PROP_LINEAR_FACTOR                = dmHashString64("linear_factor");
+    static const dmhash_t PROP_ANGULAR_FACTOR               = dmHashString64("angular_factor");
+    static const dmhash_t PROP_CONTACT_PROCESSING_THRESHOLD = dmHashString64("contact_processing_threshold");
+    static const dmhash_t PROP_LINEAR_SLEEPING_THRESHOLD    = dmHashString64("linear_sleeping_threshold");
+    static const dmhash_t PROP_ANGULAR_SLEEPING_THRESHOLD   = dmHashString64("angular_sleeping_threshold");
+    static const dmhash_t PROP_TOTAL_FORCE                  = dmHashString64("total_force");
+    static const dmhash_t PROP_TOTAL_TORQUE                 = dmHashString64("total_torque");
+
+    // Not implemented yet
+    // static const dmhash_t PROP_ADDITIONAL_DAMPING                   = dmHashString64("additional_damping");
+    // static const dmhash_t PROP_ADDITIONAL_DAMPING_FACTOR            = dmHashString64("additional_damping_factor");
+    // static const dmhash_t PROP_ADDITIONAL_LINEAR_DAMPING_THRESHOLD  = dmHashString64("additional_linear_damping_threshold");
+    // static const dmhash_t PROP_ADDITIONAL_ANGULAR_DAMPING_THRESHOLD = dmHashString64("additional_angular_damping_threshold");
+
     enum EventMask
     {
         EVENT_MASK_COLLISION = 1 << 0,
diff --git a/engine/gamesys/src/gamesys/gamesys.h b/engine/gamesys/src/gamesys/gamesys.h
index c84c955a3f..f27e0cbd61 100644
--- a/engine/gamesys/src/gamesys/gamesys.h
+++ b/engine/gamesys/src/gamesys/gamesys.h
@@ -113,6 +113,9 @@ namespace dmGameSystem
     typedef dmPhysics::JointResult (*GetJointReactionForceFn)(CollisionWorld* world, CollisionComponent* component, dmhash_t id, dmVMath::Vector3& force);
     typedef dmPhysics::JointResult (*GetJointReactionTorqueFn)(CollisionWorld* world, CollisionComponent* component, dmhash_t id, float& torque);
 
+    typedef void* (*GetNativeCollisionObjectFn)(CollisionComponent* component);
+    typedef void* (*GetNativeCollisionWorldFn)(CollisionWorld* world);
+
     struct PhysicsAdapterFunctionTable
     {
         IsEnabledFn              m_IsEnabled;
@@ -139,6 +142,9 @@ namespace dmGameSystem
         SetJointParamsFn         m_SetJointParams;
         GetJointReactionForceFn  m_GetJointReactionForce;
         GetJointReactionTorqueFn m_GetJointReactionTorque;
+
+        GetNativeCollisionObjectFn m_GetNativeCollisionObject;
+        GetNativeCollisionWorldFn  m_GetNativeCollisionWorld;
     };
 
     struct PhysicsMessage
diff --git a/engine/physics/src/physics/physics.h b/engine/physics/src/physics/physics.h
index fbe14ea581..c99dac6b9e 100644
--- a/engine/physics/src/physics/physics.h
+++ b/engine/physics/src/physics/physics.h
@@ -759,6 +759,23 @@ namespace dmPhysics
      */
     void ApplyForce2D(HContext2D context, HCollisionObject2D collision_object, const dmVMath::Vector3& force, const dmVMath::Point3& position);
 
+    /**
+     * Apply a torque to the specified 3D collision object
+     *
+     * @param context Physics context
+     * @param collision_object Collision object receiving the torque, must be of type COLLISION_OBJECT_TYPE_DYNAMIC
+     * @param torque Torque to be applied
+     */
+    void ApplyTorque3D(HContext3D context, HCollisionObject3D collision_object, const dmVMath::Vector3& torque);
+
+    /**
+     * Clear the forces on the specified 3D collision object
+     *
+     * @param context Physics context
+     * @param collision_object Collision object to clear the forces from
+     */
+    void ClearForces3D(HContext3D context, HCollisionObject3D collision_object);
+
     /**
      * Return the total force currently applied to the specified 3D collision object.
      *
@@ -777,6 +794,15 @@ namespace dmPhysics
      */
     dmVMath::Vector3 GetTotalForce2D(HContext2D context, HCollisionObject2D collision_object);
 
+    /**
+     * Return the total torque currently applied to the specified 3D collision object.
+     *
+     * @param context Physics context
+     * @param collision_object Which collision object to inspect. For objects with another type than COLLISION_OBJECT_TYPE_DYNAMIC, the torque will always be of zero size.
+     * @return The total torque.
+     */
+    dmVMath::Vector3 GetTotalTorque3D(HContext3D context, HCollisionObject3D collision_object);
+
     /**
      * Return the world position of the specified 3D collision object.
      *
@@ -1104,6 +1130,19 @@ namespace dmPhysics
     bool GetMaskBit3D(HCollisionObject3D collision_object, uint16_t groupbit);
     void SetMaskBit3D(HWorld3D world, HCollisionObject3D collision_object, uint16_t groupbit, bool boolvalue);
 
+    void SetAngularFactor3D(HCollisionObject3D collision_object, const dmVMath::Vector3& factor);
+    void SetLinearFactor3D(HCollisionObject3D collision_object, const dmVMath::Vector3& factor);
+    dmVMath::Vector3 GetAngularFactor3D(HCollisionObject3D collision_object);
+    dmVMath::Vector3 GetLinearFactor3D(HCollisionObject3D collision_object);
+
+    float GetContactProcessingThreshold3D(HCollisionObject3D collision_object);
+    void SetContactProcessingThreshold3D(HCollisionObject3D collision_object, float contact_processing_threshold);
+
+    float GetLinearSleepingThreshold3D(HCollisionObject3D collision_object);
+    void SetLinearSleepingThreshold3D(HCollisionObject3D collision_object, float linear_sleeping_threshold);
+    float GetAngularSleepingThreshold3D(HCollisionObject3D collision_object);
+    void SetAngularSleepingThreshold3D(HCollisionObject3D collision_object, float angular_sleeping_threshold);
+
     /**
      * Container of data for ray cast queries.
      */
@@ -1436,6 +1475,9 @@ namespace dmPhysics
     void              SetCollisionShapeRadius2D(HWorld2D world, HCollisionShape2D shape, float radius);
     void              SetCollisionShapeBoxDimensions2D(HWorld2D world, HCollisionShape2D shape, dmVMath::Quat rotation, float w, float h);
     void              SynchronizeObject2D(HWorld2D world, HCollisionObject2D collision_object);
+
+    void* GetNativeCollisionObject3D(HCollisionObject3D collision_object);
+    void* GetNativeCollisionWorld3D(HWorld3D world);
 }
 
 #endif // DM_PHYSICS_H
diff --git a/engine/physics/src/physics/physics_3d.cpp b/engine/physics/src/physics/physics_3d.cpp
index 69c27889f3..5f1e8d3268 100644
--- a/engine/physics/src/physics/physics_3d.cpp
+++ b/engine/physics/src/physics/physics_3d.cpp
@@ -744,6 +744,10 @@ namespace dmPhysics
             rb_info.m_restitution = data.m_Restitution;
             rb_info.m_linearDamping = data.m_LinearDamping;
             rb_info.m_angularDamping = data.m_AngularDamping;
+            if (data.m_Bullet) {
+                dmLogInfo("Additional damping is enabled");
+                rb_info.m_additionalDamping = true;
+            }
             btRigidBody* body = new btRigidBody(rb_info);
             float angular_factor = 1.0f;
             if (data.m_LockedRotation) {
@@ -885,6 +889,32 @@ namespace dmPhysics
         }
     }
 
+    void ApplyTorque3D(HContext3D context, HCollisionObject3D collision_object, const Vector3& torque)
+    {
+        btCollisionObject* bt_co = GetCollisionObject(collision_object);
+        btRigidBody* rigid_body = btRigidBody::upcast(bt_co);
+        if (rigid_body != 0x0 && !(rigid_body->isStaticOrKinematicObject()))
+        {
+            bool force_activate = false;
+            rigid_body->activate(force_activate);
+            btVector3 bt_torque;
+            ToBt(torque, bt_torque, context->m_Scale);
+            rigid_body->applyTorque(bt_torque);
+        }
+    }
+
+    void ClearForces3D(HContext3D context, HCollisionObject3D collision_object)
+    {
+        btCollisionObject* bt_co = GetCollisionObject(collision_object);
+        btRigidBody* rigid_body = btRigidBody::upcast(bt_co);
+        if (rigid_body != 0x0 && !(rigid_body->isStaticOrKinematicObject()))
+        {
+            bool force_activate = false;
+            rigid_body->activate(force_activate);
+            rigid_body->clearForces();
+        }
+    }
+
     Vector3 GetTotalForce3D(HContext3D context, HCollisionObject3D collision_object)
     {
         btRigidBody* rigid_body = btRigidBody::upcast(GetCollisionObject(collision_object));
@@ -901,6 +931,22 @@ namespace dmPhysics
         }
     }
 
+    Vector3 GetTotalTorque3D(HContext3D context, HCollisionObject3D collision_object)
+    {
+        btRigidBody* rigid_body = btRigidBody::upcast(GetCollisionObject(collision_object));
+        if (rigid_body != 0x0 && !(rigid_body->isStaticOrKinematicObject()))
+        {
+            const btVector3& bt_total_torque = rigid_body->getTotalTorque();
+            Vector3 total_torque;
+            FromBt(bt_total_torque, total_torque, context->m_InvScale);
+            return total_torque;
+        }
+        else
+        {
+            return Vector3(0.0f, 0.0f, 0.0f);
+        }
+    }
+
     static Point3 GetWorldPosition(HContext3D context, btCollisionObject* collision_object)
     {
         const btVector3& bt_position = collision_object->getWorldTransform().getOrigin();
@@ -1170,6 +1216,107 @@ namespace dmPhysics
 		}
 	}
 
+    Vector3 GetLinearFactor3D(HCollisionObject3D collision_object)
+    {
+        Vector3 linear_factor(0.0f, 0.0f, 0.0f);
+        btRigidBody* body = btRigidBody::upcast(GetCollisionObject(collision_object));
+        if (body != 0x0)
+        {
+            const btVector3& v = body->getLinearFactor();
+            FromBt(v, linear_factor, 1.0f);
+        }
+        return linear_factor;
+    }
+
+    Vector3 GetAngularFactor3D(HCollisionObject3D collision_object)
+    {
+        Vector3 angular_factor(0.0f, 0.0f, 0.0f);
+        btRigidBody* body = btRigidBody::upcast(GetCollisionObject(collision_object));
+        if (body != 0x0)
+        {
+            const btVector3& v = body->getAngularFactor();
+            FromBt(v, angular_factor, 1.0f);
+        }
+        return angular_factor;
+    }
+
+    void SetLinearFactor3D(HCollisionObject3D collision_object, const Vector3& factor)
+    {
+        btRigidBody* body = btRigidBody::upcast(GetCollisionObject(collision_object));
+        if (body != 0x0)
+        {
+            btVector3 bt_factor;
+            ToBt(factor, bt_factor, 1.0f);
+            body->setLinearFactor(bt_factor);
+        }
+    }
+
+    void SetAngularFactor3D(HCollisionObject3D collision_object, const Vector3& factor)
+    {
+        btRigidBody* body = btRigidBody::upcast(GetCollisionObject(collision_object));
+        if (body != 0x0)
+        {
+            btVector3 bt_factor;
+            ToBt(factor, bt_factor, 1.0f);
+            body->setAngularFactor(bt_factor);
+        }
+    }
+
+    float GetContactProcessingThreshold3D(HCollisionObject3D collision_object) {
+        btCollisionObject* co = GetCollisionObject(collision_object);
+        return co->getContactProcessingThreshold();
+    }
+
+    void SetContactProcessingThreshold3D(HCollisionObject3D collision_object, float contact_processing_threshold) {
+        btCollisionObject* co = GetCollisionObject(collision_object);
+        co->setContactProcessingThreshold(contact_processing_threshold);
+    }
+
+    float GetLinearSleepingThreshold3D(HCollisionObject3D collision_object) {
+        btCollisionObject* co = GetCollisionObject(collision_object);
+        btRigidBody* body = btRigidBody::upcast(co);
+        if (body != 0x0) {
+            return body->getLinearSleepingThreshold();
+        } else {
+            return 0.0f;
+        }
+    }
+
+    void SetLinearSleepingThreshold3D(HCollisionObject3D collision_object, float linear_sleeping_threshold) {
+        btCollisionObject* co = GetCollisionObject(collision_object);
+        btRigidBody* body = btRigidBody::upcast(co);
+        if (body != 0x0) {
+            body->setSleepingThresholds(linear_sleeping_threshold, body->getAngularSleepingThreshold());
+        }
+    }
+
+    float GetAngularSleepingThreshold3D(HCollisionObject3D collision_object) {
+        btCollisionObject* co = GetCollisionObject(collision_object);
+        btRigidBody* body = btRigidBody::upcast(co);
+        if (body != 0x0) {
+            return body->getAngularSleepingThreshold();
+        } else {
+            return 0.0f;
+        }
+    }
+
+    void SetAngularSleepingThreshold3D(HCollisionObject3D collision_object, float angular_sleeping_threshold) {
+        btCollisionObject* co = GetCollisionObject(collision_object);
+        btRigidBody* body = btRigidBody::upcast(co);
+        if (body != 0x0) {
+            body->setSleepingThresholds(body->getLinearSleepingThreshold(), angular_sleeping_threshold);
+        }
+    }
+
+    // bool GetAdditionalDamping3D(HCollisionObject3D collision_object) {
+    //     btCollisionObject* co = GetCollisionObject(collision_object);
+    //     btRigidBody* body = btRigidBody::upcast(co);
+    //     if (body != 0x0) {
+    //         return body->getAdditionalDamping();
+    //     }
+    //     return false;
+    // }
+
     void RequestRayCast3D(HWorld3D world, const RayCastRequest& request)
     {
         if (!world->m_RayCastRequests.Full())
@@ -1368,4 +1515,14 @@ namespace dmPhysics
             }
         }
     }
+
+    void* GetNativeCollisionObject3D(HCollisionObject3D collision_object)
+    {
+        return (void*) GetCollisionObject(collision_object);
+    }
+
+    void* GetNativeCollisionWorld3D(HWorld3D world)
+    {
+        return (void*) world->m_DynamicsWorld;
+    }
 }
diff --git a/scripts/build.py b/scripts/build.py
index ed172050f9..cd0f572678 100755
--- a/scripts/build.py
+++ b/scripts/build.py
@@ -2362,8 +2362,15 @@ class Configuration(object):
 
 
     def upload_to_archive(self, src_file, dst_path):
-        url = join(self.get_archive_path(), dst_path).replace("\\", "/")
-        self.upload_to_s3(src_file, url)
+        print("<!> upload_to_archive: src_file %s, dst_path %s" % (src_file, dst_path))
+        dst = os.path.join(self.defold_root, self.dynamo_home, "archive")
+        print("                       dst %s" % dst)
+        self._mkdirs(os.path.join(dst, os.path.dirname(dst_path)))
+        print("                       mkdirs %s" % os.path.join(dst, os.path.dirname(dst_path)))
+        if os.path.isdir(src_file):
+            self._copy_tree(src_file, os.path.join(dst, dst_path))
+        else:
+            self._copy(src_file, os.path.join(dst, dst_path))
 
 
     def download_from_s3(self, path, url):
